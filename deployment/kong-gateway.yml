version: '3.8'

services:
  # Kong API Gateway
  kong:
    image: kong:3.4-alpine
    container_name: kong-gateway
    restart: unless-stopped
    ports:
      - "8080:8000"    # HTTP proxy
      - "8443:8443"    # HTTPS proxy  
      - "8001:8001"    # Admin API
      - "8444:8444"    # Admin API HTTPS
    environment:
      KONG_DATABASE: "off"                # DB-less mode
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
    volumes:
      - ./kong:/kong/declarative
    depends_on:
      - backend
      - prometheus
      
  # Твой существующий backend
  backend:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - docker.env
    depends_on:
      - redis
    volumes:
      - ../logs:/app/logs
      - ../media:/app/media
    restart: unless-stopped

  # Redis для кеширования Gateway
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Prometheus для метрик
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped

  # Grafana для дашбордов
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    env_file:
      - docker.env
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana_dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped

volumes:
  redis_data:
  prometheus_data:
  grafana_data: 