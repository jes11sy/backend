name: 🐍 Backend CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.10'

jobs:
  # 🧪 Tests & Quality
  quality-checks:
    name: 🧪 Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black mypy pytest-cov bandit safety

      - name: 🔍 Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
          flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 🎨 Check code formatting with black
        run: |
          black --check --diff app

      - name: 🔤 Type checking with mypy
        run: |
          mypy app --ignore-missing-imports --no-strict-optional

      - name: 🔒 Security scan with bandit
        run: |
          bandit -r app -f json -o bandit-report.json || true
          bandit -r app --exit-zero

      - name: 📋 Safety check dependencies
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: 🧪 Run tests with coverage
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key-for-ci
          JWT_SECRET_KEY: test-jwt-secret-key-for-ci
          ENVIRONMENT: testing
        run: |
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term
          
      - name: 📊 Upload coverage to artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
            bandit-report.json
            safety-report.json

  # 🐳 Build Docker Image
  build:
    name: 🐳 Build Docker
    runs-on: ubuntu-latest
    needs: [quality-checks]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: backend-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-

      - name: 🐳 Build Docker image
        run: |
          docker build -f deployment/Dockerfile.production -t backend-api:latest .
          docker tag backend-api:latest backend-api:${{ github.sha }}
          
      - name: 💾 Save Docker image
        run: |
          docker save backend-api:latest | gzip > backend-image.tar.gz
          
      - name: 📤 Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: backend-docker-image
          path: backend-image.tar.gz
          retention-days: 1

  # 🌟 Deploy to Production
  deploy-production:
    name: 🌟 Deploy Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: backend-docker-image
          path: .

      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: 📦 Upload deployment files
        run: |
          echo "🌟 Uploading backend files to ${{ secrets.DEPLOY_HOST }}..."
          
          # Upload docker image
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            backend-image.tar.gz \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/
          
          # Upload docker-compose and env files
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            deployment/docker-compose.production.yml \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}/

      - name: 🚀 Deploy Backend
        run: |
          echo "🚀 Deploying backend to production..."
          
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          
          # Navigate to deployment directory
          cd ${{ secrets.DEPLOY_PATH }}
          
          # Load new Docker image
          echo "📦 Loading new Docker image..."
          docker load < /tmp/backend-image.tar.gz
          
          # Backup current deployment
          echo "💾 Creating backup..."
          if [ -f docker-compose.production.yml ]; then
            docker-compose -f docker-compose.production.yml down --remove-orphans || true
          fi
          
          # Run database migrations
          echo "📋 Running database migrations..."
          docker run --rm \
            --network backend_network \
            -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            backend-api:latest \
            alembic upgrade head || echo "⚠️ Migration failed, continuing..."
          
          # Start new deployment
          echo "🌟 Starting new deployment..."
          docker-compose -f docker-compose.production.yml up -d
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to start..."
          sleep 30
          
          # Check service health
          echo "🔍 Checking service health..."
          docker-compose -f docker-compose.production.yml ps
          
          # Cleanup old images
          echo "🗑️ Cleaning up old images..."
          docker image prune -f
          rm -f /tmp/backend-image.tar.gz
          
          echo "✅ Backend deployment completed!"
          EOF

      - name: 🔍 Verify deployment
        run: |
          echo "🔍 Verifying backend deployment..."
          sleep 10  # Wait for services to fully start
          
          # Check if API is accessible
          for i in {1..5}; do
            if curl -f -s -I https://api.${{ secrets.DEPLOY_HOST }}/api/health > /dev/null; then
              echo "✅ Backend API is accessible at https://api.${{ secrets.DEPLOY_HOST }}"
              break
            else
              echo "⏳ Attempt $i/5: API not ready yet, waiting..."
              sleep 10
            fi
          done
          
          # Final health check
          if ! curl -f -s https://api.${{ secrets.DEPLOY_HOST }}/api/health; then
            echo "❌ Backend API health check failed"
            exit 1
          fi

      - name: 🎉 Success notification
        run: |
          echo "✅ Backend deployed to production!"
          echo "🌐 API URL: https://api.${{ secrets.DEPLOY_HOST }}"
          echo "📖 Docs: https://api.${{ secrets.DEPLOY_HOST }}/docs"
          echo "🔍 Health: https://api.${{ secrets.DEPLOY_HOST }}/api/health"
          echo "🐳 Docker: docker-compose deployment"
          echo "📁 Deployed to: ${{ secrets.DEPLOY_PATH }}"

  # 📊 Performance Tests (Optional)
  performance-tests:
    name: 📊 Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🚀 Basic load test
        run: |
          echo "🚀 Running basic load test..."
          
          # Install curl and basic tools
          sudo apt-get update && sudo apt-get install -y curl time
          
          # Test API health endpoint
          echo "Testing API health..."
          time curl -f -s https://api.${{ secrets.DEPLOY_HOST }}/api/health
          
          # Test API docs accessibility
          echo "Testing API docs..."
          curl -f -s https://api.${{ secrets.DEPLOY_HOST }}/docs > /dev/null
          
          echo "✅ Basic performance tests completed" 