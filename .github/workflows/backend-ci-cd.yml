name: üêç Backend CI/CD

# Updated: Removed tests - only linting and deployment
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.10'

jobs:
  # üîç Code Quality
  code-quality:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    


    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black mypy

      - name: üîç Lint with flake8
        run: |
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: üé® Check code formatting with black
        run: |
          black --check --diff app

      - name: üî§ Type checking with mypy
        run: |
          mypy app --ignore-missing-imports --no-strict-optional





  # üê≥ Build Docker Image
  build:
    name: üê≥ Build Docker
    runs-on: ubuntu-latest
    needs: [code-quality]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: üè∑Ô∏è Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: backend-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-

      - name: üê≥ Build Docker image
        run: |
          docker build --no-cache -f deployment/Dockerfile.production -t backend-backend:latest .
          docker tag backend-backend:latest backend-backend:${{ github.sha }}
          
      - name: üíæ Save Docker image
        run: |
          docker save backend-backend:latest | gzip > backend-image.tar.gz
          
      - name: üì§ Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: backend-docker-image
          path: backend-image.tar.gz
          retention-days: 1

  # üåü Deploy to Production
  deploy-production:
    name: üåü Deploy Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì• Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: backend-docker-image
          path: .

      - name: üîê Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: üìã Create .env.production file
        run: |
          cat > .env.production << EOF
          # Security
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          WEB_JWT_SECRET=${{ secrets.WEB_JWT_SECRET }}
          MOBILE_JWT_SECRET=${{ secrets.MOBILE_JWT_SECRET }}
          ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}
          EXTERNAL_JWT_SECRET=${{ secrets.EXTERNAL_JWT_SECRET }}
          SESSION_SECRET=${{ secrets.SESSION_SECRET }}
          
          # Database PostgreSQL
          POSTGRESQL_HOST=${{ secrets.POSTGRESQL_HOST }}
          POSTGRESQL_PORT=${{ secrets.POSTGRESQL_PORT }}
          POSTGRESQL_USER=${{ secrets.POSTGRESQL_USER }}
          POSTGRESQL_PASSWORD=${{ secrets.POSTGRESQL_PASSWORD }}
          POSTGRESQL_DBNAME=${{ secrets.POSTGRESQL_DBNAME }}
          DATABASE_URL=postgresql+asyncpg://${{ secrets.POSTGRESQL_USER }}:${{ secrets.POSTGRESQL_PASSWORD }}@${{ secrets.POSTGRESQL_HOST }}:${{ secrets.POSTGRESQL_PORT }}/${{ secrets.POSTGRESQL_DBNAME }}
          
          # Redis
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_URL=redis://:${{ secrets.REDIS_PASSWORD }}@localhost:6379/0
          
          # CORS & Domains
          CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
          
          # SSL & Security
          LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
          CLOUDFLARE_EMAIL=${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_DNS_API_TOKEN=${{ secrets.CLOUDFLARE_DNS_API_TOKEN }}
          
          # Email (Rambler)
          RAMBLER_IMAP_USERNAME=${{ secrets.RAMBLER_IMAP_USERNAME }}
          RAMBLER_IMAP_PASSWORD=${{ secrets.RAMBLER_IMAP_PASSWORD }}
          RAMBLER_IMAP_HOST=${{ secrets.RAMBLER_IMAP_HOST }}
          RAMBLER_IMAP_PORT=${{ secrets.RAMBLER_IMAP_PORT }}
          RAMBLER_IMAP_USE_SSL=${{ secrets.RAMBLER_IMAP_USE_SSL }}
          
          # Monitoring
          GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
          
          # Telegram
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
          
          # Recordings
          RECORDINGS_CHECK_INTERVAL=${{ secrets.RECORDINGS_CHECK_INTERVAL }}
          
          # External APIs
          EXTERNAL_API_KEY=${{ secrets.EXTERNAL_API_KEY }}
          
          # Application
          ENVIRONMENT=production
          DEBUG=false
          LOG_LEVEL=INFO
          LOG_TO_FILE=true
          
          # Performance
          WORKERS=4
          MAX_CONNECTIONS=100
          POOL_SIZE=20
          POOL_OVERFLOW=0
          
          # Rate Limiting
          RATE_LIMIT_PER_MINUTE=60
          CACHE_TTL=300
          
          # Paths
          MEDIA_ROOT=/app/media
          DATA_ROOT=/app/data
          LOGS_ROOT=/app/logs
          EOF

      - name: üì¶ Upload deployment files
        run: |
          echo "üåü Uploading backend files to ${{ secrets.PRODUCTION_HOST }}..."
          
          # Upload docker image
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            backend-image.tar.gz \
            ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/tmp/
          
          # Upload docker-compose and env files
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            deployment/docker-compose.production.yml \
            ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/var/www/backend/
            
          # Upload environment file
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            .env.production \
            ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/var/www/backend/

      - name: üöÄ Deploy Backend
        run: |
          echo "üöÄ Deploying backend to production..."
          
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          
          # Navigate to deployment directory
          cd /var/www/backend
          
          # Update code from git
          echo "üîÑ Updating code from git..."
          git fetch --all
          git reset --hard origin/main
          git clean -fd
          
          # Load new Docker image
          echo "üì¶ Loading new Docker image..."
          docker load < /tmp/backend-image.tar.gz
          
          # Backup current deployment
          echo "üíæ Creating backup..."
          if [ -f docker-compose.production.yml ]; then
            docker-compose -f docker-compose.production.yml down --remove-orphans || true
          fi
          
          # Clean Docker cache aggressively
          echo "üóëÔ∏è Cleaning Docker cache..."
          docker system prune -a -f || true
          docker volume prune -f || true
          docker network prune -f || true
          
          # Run database migrations
          echo "üìã Running database migrations..."
          docker run --rm \
            --env-file .env.production \
            --network backend_network \
            backend-backend:latest \
            alembic upgrade head || echo "‚ö†Ô∏è Migration failed, continuing..."
          
          # Start new deployment with force recreate
          echo "üåü Starting new deployment..."
          docker-compose -f docker-compose.production.yml --env-file .env.production up -d --force-recreate --remove-orphans
          
          # Wait for services to be ready
          echo "‚è≥ Waiting for services to start..."
          sleep 30
          
          # Check service health
          echo "üîç Checking service health..."
          docker-compose -f docker-compose.production.yml ps
          
          # Final cleanup
          echo "üóëÔ∏è Final cleanup..."
          docker image prune -f
          docker container prune -f
          rm -f /tmp/backend-image.tar.gz
          
          echo "‚úÖ Backend deployment completed!"
          EOF

      - name: üîç Verify deployment
        run: |
          echo "üîç Verifying backend deployment..."
          sleep 10  # Wait for services to fully start
          
          # Check if API is accessible
          for i in {1..5}; do
            if curl -f -s -I https://api.lead-schem.ru/health > /dev/null; then
              echo "‚úÖ Backend API is accessible at https://api.lead-schem.ru"
              break
            else
              echo "‚è≥ Attempt $i/5: API not ready yet, waiting..."
              sleep 10
            fi
          done
          
          # Final health check
          if ! curl -f -s https://api.lead-schem.ru/health; then
            echo "‚ùå Backend API health check failed"
            exit 1
          fi

      - name: üéâ Success notification
        run: |
          echo "‚úÖ Backend deployed to production!"
          echo "üåê API URL: https://api.lead-schem.ru"
          echo "üìñ Docs: https://api.lead-schem.ru/docs"
          echo "üîç Health: https://api.lead-schem.ru/health"
          echo "üê≥ Docker: docker-compose deployment"
          echo "üìÅ Deployed to: /var/www/backend"

      - name: üì¢ Telegram notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            MESSAGE="‚úÖ Backend —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–µ–ø–ª–æ–µ–Ω!%0Aüåê API: https://api.lead-schem.ru%0Aüîç Health: https://api.lead-schem.ru/health"
          else
            MESSAGE="‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è backend!%0Aüîó –õ–æ–≥–∏: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=HTML" || echo "Telegram notification failed"

  # üìä Performance Tests (Optional)
  performance-tests:
    name: üìä Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üöÄ Basic load test
        run: |
          echo "üöÄ Running basic load test..."
          
          # Install curl and basic tools
          sudo apt-get update && sudo apt-get install -y curl time
          
          # Test API health endpoint
          echo "Testing API health..."
          time curl -f -s https://api.lead-schem.ru/health
          
          # Test API docs accessibility
          echo "Testing API docs..."
          curl -f -s https://api.lead-schem.ru/docs > /dev/null
          
          # Test auth endpoint
          echo "Testing auth endpoint..."
          curl -f -s -I https://api.lead-schem.ru/api/auth/me > /dev/null || echo "Auth endpoint OK (401 expected)"
          
          echo "‚úÖ Basic performance tests completed" 