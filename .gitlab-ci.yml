stages:
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY_IMAGE: "registry.gitlab.com/jes11sy-group/backend"
  PRODUCTION_HOST: "176.124.200.32"
  PRODUCTION_USER: "root"

# –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏
cache:
  paths:
    - .pytest_cache/
    - __pycache__/

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞

# –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "üèóÔ∏è –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    - docker build -t $REGISTRY_IMAGE/backend:$CI_COMMIT_SHA -f deployment/Dockerfile.production .
    - docker build -t $REGISTRY_IMAGE/backend:latest -f deployment/Dockerfile.production .
    - echo "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ –≤ registry..."
    - docker push $REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - docker push $REGISTRY_IMAGE/backend:latest
    - echo "‚úÖ –û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω"
  only:
    - main

# –î–µ–ø–ª–æ–π –Ω–∞ staging
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client bash curl
    - eval $(ssh-agent -s)
    - echo "$STAGING_SSH_PRIVATE_KEY" > /tmp/ssh_key
    - chmod 600 /tmp/ssh_key
    - ssh-add /tmp/ssh_key
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $STAGING_HOST >> ~/.ssh/known_hosts
  script:
    - echo "üöÄ –î–µ–ø–ª–æ–π –Ω–∞ staging —Å–µ—Ä–≤–µ—Ä..."
    - ssh $STAGING_USER@$STAGING_HOST "
        cd /opt/backend &&
        docker-compose -f docker-compose.staging.yml pull &&
        docker-compose -f docker-compose.staging.yml up -d &&
        docker system prune -f
      "
    - echo "‚úÖ Staging –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω"
  environment:
    name: staging
    url: https://staging-api.lead-schem.ru
  only:
    - develop

# –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client bash curl git
    - eval $(ssh-agent -s)
    - echo "$PRODUCTION_SSH_PRIVATE_KEY" > /tmp/ssh_key
    - chmod 600 /tmp/ssh_key
    - ssh-add /tmp/ssh_key
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $PRODUCTION_HOST >> ~/.ssh/known_hosts
  script:
    - echo "üöÄ –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä..."
    - |
      ssh $PRODUCTION_USER@$PRODUCTION_HOST "
        cd /home/deployer/backend-api &&
        git remote set-url origin https://gitlab-ci-token:$GITLAB_TOKEN@gitlab.com/jes11sy-group/backend.git &&
        git pull origin main &&

        echo 'üìù –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞...' &&
        cat > .env << EOF
      # Database Configuration
      POSTGRESQL_HOST=${POSTGRESQL_HOST}
      POSTGRESQL_PORT=${POSTGRESQL_PORT}
      POSTGRESQL_USER=${POSTGRESQL_USER}
      POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      POSTGRESQL_DBNAME=${POSTGRESQL_DBNAME}

      # Security
      SECRET_KEY=${SECRET_KEY}
      JWT_SECRET_KEY=${JWT_SECRET_KEY}

      # Redis
      REDIS_PASSWORD=${REDIS_PASSWORD}

      # SSL and Domain
      LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}

      # Traefik
      TRAEFIK_AUTH=${TRAEFIK_AUTH}

      # Monitoring
      GRAFANA_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}

      # Environment
      ENVIRONMENT=production
      DEBUG=false
      EOF

        echo 'üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Prometheus...' &&
        mkdir -p deployment/monitoring/prometheus_config &&
        cat > deployment/monitoring/prometheus_config/prometheus.yml << 'PROMETHEUS_EOF'
      global:
        scrape_interval: 15s
        evaluation_interval: 15s

      rule_files:

      scrape_configs:
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']

        - job_name: 'node-exporter'
          static_configs:
            - targets: ['node-exporter:9100']

        - job_name: 'backend'
          static_configs:
            - targets: ['backend:8000']
          metrics_path: '/metrics'

        - job_name: 'traefik'
          static_configs:
            - targets: ['traefik:8080']
      PROMETHEUS_EOF

        echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin &&
        docker-compose -f deployment/docker-compose.production.yml build --no-cache &&
        docker-compose -f deployment/docker-compose.production.yml up -d &&
        docker system prune -f &&
        echo '‚úÖ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω'
      "
    - rm -f /tmp/ssh_key
    - echo "üéâ –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!"
  environment:
    name: production
    url: http://176.124.200.32:8000
  only:
    - main

# –û—Ç–∫–∞—Ç –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º
rollback_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$PRODUCTION_SSH_PRIVATE_KEY" > /tmp/ssh_key
    - chmod 600 /tmp/ssh_key
    - ssh-add /tmp/ssh_key
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $PRODUCTION_HOST >> ~/.ssh/known_hosts
  script:
    - echo "üîÑ –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏..."
    - ssh $PRODUCTION_USER@$PRODUCTION_HOST "
        cd /opt/backend &&
        docker-compose -f docker-compose.production.yml down &&
        docker tag $REGISTRY_IMAGE/backend:previous $REGISTRY_IMAGE/backend:latest &&
        docker-compose -f docker-compose.production.yml up -d &&
        echo '‚úÖ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω'
      "
  environment:
    name: production
    url: https://api.lead-schem.ru
  when: manual
  only:
    - main

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
notify_success:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -H "Content-Type: application/json" \
        -d "{
          \"chat_id\": \"$TELEGRAM_CHAT_ID\",
          \"text\": \"‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\nüöÄ Commit: $CI_COMMIT_SHA\nüìù Message: $CI_COMMIT_MESSAGE\nüåê URL: https://api.lead-schem.ru\n‚è∞ Time: $(date)\",
          \"parse_mode\": \"HTML\"
        }"
  when: on_success
  only:
    - main

notify_failure:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -H "Content-Type: application/json" \
        -d "{
          \"chat_id\": \"$TELEGRAM_CHAT_ID\",
          \"text\": \"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è!\n\nüöÄ Commit: $CI_COMMIT_SHA\nüìù Message: $CI_COMMIT_MESSAGE\nüîó Pipeline: $CI_PIPELINE_URL\n‚è∞ Time: $(date)\",
          \"parse_mode\": \"HTML\"
        }"
  when: on_failure
  only:
    - main 