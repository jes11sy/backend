stages:
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY_IMAGE: $CI_REGISTRY_IMAGE
  PRODUCTION_HOST: "api.lead-schem.ru"

# –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏
cache:
  paths:
    - .pytest_cache/
    - __pycache__/

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
test:
  stage: test
  image: python:3.11-slim
  services:
    - postgres:13
    - redis:7-alpine
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: test_password
    POSTGRES_HOST: postgres
    REDIS_HOST: redis
    REDIS_PORT: 6379
  before_script:
    - apt-get update -qy
    - apt-get install -y postgresql-client
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install pytest pytest-asyncio pytest-cov
  script:
    - echo "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    - pytest tests/ -v --cov=app --cov-report=term-missing
    - echo "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  only:
    - main
    - develop
    - merge_requests

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security_scan:
  stage: test
  image: python:3.11-slim
  before_script:
    - pip install bandit safety
  script:
    - echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞..."
    - bandit -r app/ -f json -o bandit-report.json || true
    - safety check --json --output safety-report.json || true
    - echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
  artifacts:
    reports:
      sast: bandit-report.json
    paths:
      - safety-report.json
    expire_in: 1 week
  only:
    - main
    - develop

# –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "üèóÔ∏è –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    - docker build -t $REGISTRY_IMAGE/backend:$CI_COMMIT_SHA -f deployment/Dockerfile.production .
    - docker build -t $REGISTRY_IMAGE/backend:latest -f deployment/Dockerfile.production .
    - echo "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ –≤ registry..."
    - docker push $REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - docker push $REGISTRY_IMAGE/backend:latest
    - echo "‚úÖ –û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω"
  only:
    - main

# –î–µ–ø–ª–æ–π –Ω–∞ staging
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client bash curl
    - eval $(ssh-agent -s)
    - echo "$STAGING_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $STAGING_HOST >> ~/.ssh/known_hosts
  script:
    - echo "üöÄ –î–µ–ø–ª–æ–π –Ω–∞ staging —Å–µ—Ä–≤–µ—Ä..."
    - ssh $STAGING_USER@$STAGING_HOST "
        cd /opt/backend &&
        docker-compose -f docker-compose.staging.yml pull &&
        docker-compose -f docker-compose.staging.yml up -d &&
        docker system prune -f
      "
    - echo "‚úÖ Staging –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω"
  environment:
    name: staging
    url: https://staging-api.lead-schem.ru
  only:
    - develop

# –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client bash curl
    - eval $(ssh-agent -s)
    - echo "$PRODUCTION_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $PRODUCTION_HOST >> ~/.ssh/known_hosts
  script:
    - echo "üöÄ –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä..."
    - ssh $PRODUCTION_USER@$PRODUCTION_HOST "
        cd /opt/backend &&
        echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY &&
        docker-compose -f docker-compose.production.yml pull &&
        docker-compose -f docker-compose.production.yml up -d &&
        docker system prune -f &&
        echo '‚úÖ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω'
      "
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
    - sleep 30
    - curl -f https://api.lead-schem.ru/health || exit 1
    - echo "üéâ –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
  environment:
    name: production
    url: https://api.lead-schem.ru
  when: manual  # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  only:
    - main

# –û—Ç–∫–∞—Ç –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º
rollback_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$PRODUCTION_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $PRODUCTION_HOST >> ~/.ssh/known_hosts
  script:
    - echo "üîÑ –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏..."
    - ssh $PRODUCTION_USER@$PRODUCTION_HOST "
        cd /opt/backend &&
        docker-compose -f docker-compose.production.yml down &&
        docker tag $REGISTRY_IMAGE/backend:previous $REGISTRY_IMAGE/backend:latest &&
        docker-compose -f docker-compose.production.yml up -d &&
        echo '‚úÖ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω'
      "
  environment:
    name: production
    url: https://api.lead-schem.ru
  when: manual
  only:
    - main

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
notify_success:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -H "Content-Type: application/json" \
        -d "{
          \"chat_id\": \"$TELEGRAM_CHAT_ID\",
          \"text\": \"‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\nüöÄ Commit: $CI_COMMIT_SHA\nüìù Message: $CI_COMMIT_MESSAGE\nüåê URL: https://api.lead-schem.ru\n‚è∞ Time: $(date)\",
          \"parse_mode\": \"HTML\"
        }"
  when: on_success
  only:
    - main

notify_failure:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -H "Content-Type: application/json" \
        -d "{
          \"chat_id\": \"$TELEGRAM_CHAT_ID\",
          \"text\": \"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è!\n\nüöÄ Commit: $CI_COMMIT_SHA\nüìù Message: $CI_COMMIT_MESSAGE\nüîó Pipeline: $CI_PIPELINE_URL\n‚è∞ Time: $(date)\",
          \"parse_mode\": \"HTML\"
        }"
  when: on_failure
  only:
    - main 