#!/bin/bash

# ============================================
# PRODUCTION DEPLOYMENT SCRIPT
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ api.lead-schem.ru
# ============================================

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_env_vars() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    required_vars=(
        "PRODUCTION_HOST"
        "PRODUCTION_USER"
        "CI_REGISTRY_IMAGE"
        "POSTGRESQL_PASSWORD"
        "REDIS_PASSWORD"
        "SECRET_KEY"
        "JWT_SECRET_KEY"
    )
    
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var}" ]]; then
            error "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è $var –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
        fi
    done
    
    log "‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
check_server_connection() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É $PRODUCTION_HOST..."
    
    if ! ssh -o ConnectTimeout=10 "$PRODUCTION_USER@$PRODUCTION_HOST" "echo 'Connection successful'"; then
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É $PRODUCTION_HOST"
    fi
    
    log "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å–ø–µ—à–Ω–æ"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
create_backup() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
    
    ssh "$PRODUCTION_USER@$PRODUCTION_HOST" << 'EOF'
        cd /opt/backend
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        mkdir -p /opt/backups/$(date +%Y-%m-%d)
        
        # –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–≤–Ω–µ—à–Ω–µ–π)
        # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è pg_dump –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–µ–π –ë–î
        PGPASSWORD=$POSTGRESQL_PASSWORD pg_dump \
            -h $POSTGRESQL_HOST \
            -p $POSTGRESQL_PORT \
            -U $POSTGRESQL_USER \
            -d $POSTGRESQL_DBNAME \
            > /opt/backups/$(date +%Y-%m-%d)/database_backup.sql
        
        # –ë—ç–∫–∞–ø —Ñ–∞–π–ª–æ–≤
        tar -czf /opt/backups/$(date +%Y-%m-%d)/media_backup.tar.gz \
            -C /opt/backend media/
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ docker-compose —Ñ–∞–π–ª–∞
        cp docker-compose.production.yml \
            /opt/backups/$(date +%Y-%m-%d)/docker-compose.backup.yml
        
        echo "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞"
EOF
    
    log "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞"
}

# –î–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
deploy_application() {
    log "–ù–∞—á–∞–ª–æ –¥–µ–ø–ª–æ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    scp deployment/env.production.example "$PRODUCTION_USER@$PRODUCTION_HOST:/opt/backend/.env.production"
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    ssh "$PRODUCTION_USER@$PRODUCTION_HOST" << EOF
        cd /opt/backend
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
        git pull origin main
        
        # –õ–æ–≥–∏–Ω –≤ Docker Registry
        echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤
        docker-compose -f docker-compose.production.yml pull backend
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ –¥–ª—è –æ—Ç–∫–∞—Ç–∞
        docker tag \$(docker images $CI_REGISTRY_IMAGE/backend:latest -q | head -1) \
            $CI_REGISTRY_IMAGE/backend:previous || true
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        docker-compose -f docker-compose.production.yml down
        
        # –ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        docker-compose -f docker-compose.production.yml up -d
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
        sleep 30
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        if ! curl -f https://api.lead-schem.ru/health; then
            echo "‚ùå Health check failed, rolling back..."
            docker-compose -f docker-compose.production.yml down
            docker tag $CI_REGISTRY_IMAGE/backend:previous $CI_REGISTRY_IMAGE/backend:latest
            docker-compose -f docker-compose.production.yml up -d
            exit 1
        fi
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
        docker system prune -f
        
        echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
EOF
    
    log "‚úÖ –î–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
post_deploy_checks() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    if curl -f https://api.lead-schem.ru/health; then
        log "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        error "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    ssh "$PRODUCTION_USER@$PRODUCTION_HOST" << 'EOF'
        cd /opt/backend
        
        echo "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
        docker-compose -f docker-compose.production.yml ps
        
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
        docker stats --no-stream
        
        echo "–õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"
        docker-compose -f docker-compose.production.yml logs --tail=20 backend
EOF
    
    log "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
send_notification() {
    local status=$1
    local message=$2
    
    if [[ -n "$TELEGRAM_BOT_TOKEN" && -n "$TELEGRAM_CHAT_ID" ]]; then
        curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{
                \"chat_id\": \"$TELEGRAM_CHAT_ID\",
                \"text\": \"$status –î–µ–ø–ª–æ–π –Ω–∞ api.lead-schem.ru\n\n$message\n\n‚è∞ $(date)\",
                \"parse_mode\": \"HTML\"
            }" > /dev/null 2>&1
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üöÄ –ù–∞—á–∞–ª–æ –¥–µ–ø–ª–æ—è –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä api.lead-schem.ru"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
    check_env_vars
    check_server_connection
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    create_backup
    
    # –î–µ–ø–ª–æ–π
    if deploy_application; then
        post_deploy_checks
        send_notification "‚úÖ" "–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
        log "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    else
        send_notification "‚ùå" "–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è!"
        error "‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–ø–ª–æ—è"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [options]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  --help, -h     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo "  --dry-run      –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –¥–µ–ø–ª–æ—è"
    echo ""
    echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
    echo "  PRODUCTION_HOST     –•–æ—Å—Ç –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞"
    echo "  PRODUCTION_USER     –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è SSH"
    echo "  CI_REGISTRY_IMAGE   Docker registry –æ–±—Ä–∞–∑–∞"
    echo "  TELEGRAM_BOT_TOKEN  –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    echo "  TELEGRAM_CHAT_ID    ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    exit 0
fi

if [[ "$1" == "--dry-run" ]]; then
    log "üîç Dry run mode - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    check_env_vars
    check_server_connection
    log "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
    exit 0
fi

# –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è
main "$@" 