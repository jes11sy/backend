#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""
import asyncio
import logging
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("performance_optimization.log"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)


async def check_cache_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è...")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
        from app.core.cache import cache_manager, init_cache

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à
        await init_cache()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = cache_manager.get_stats()
        logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        logger.info(f"Redis –ø–æ–¥–∫–ª—é—á–µ–Ω: {'‚úÖ' if stats['redis_connected'] else '‚ùå'}")
        logger.info(f"–õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à: {stats['local_cache_size']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


async def test_optimized_crud():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö CRUD –æ–ø–µ—Ä–∞—Ü–∏–π...")

    try:
        from app.core.database import AsyncSessionLocal
        from app.core.optimized_crud_v2 import OptimizedCRUDv2
        import time

        async with AsyncSessionLocal() as db:
            # –¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
            start_time = time.time()
            cities = await OptimizedCRUDv2.get_cities_cached(db)
            first_time = time.time() - start_time

            start_time = time.time()
            cities_cached = await OptimizedCRUDv2.get_cities_cached(db)
            second_time = time.time() - start_time

            improvement = (
                ((first_time - second_time) / first_time * 100) if first_time > 0 else 0
            )

            logger.info(f"‚úÖ –¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:")
            logger.info(f"  –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: {first_time:.3f}—Å")
            logger.info(f"  –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {second_time:.3f}—Å")
            logger.info(f"  –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")

            # –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            start_time = time.time()
            requests = await OptimizedCRUDv2.get_requests_optimized(db, limit=10)
            query_time = time.time() - start_time

            logger.info(f"‚úÖ –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
            logger.info(f"  –ó–∞–≥—Ä—É–∑–∫–∞ 10 –∑–∞—è–≤–æ–∫: {query_time:.3f}—Å")
            logger.info(f"  –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞—è–≤–æ–∫: {len(requests)}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRUD: {e}")
        return False


async def create_basic_indexes():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤"""
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...")

    try:
        from app.core.database import engine
        from sqlalchemy import text

        async with engine.begin() as conn:
            # –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∑–∞—è–≤–æ–∫
            indexes = [
                "CREATE INDEX IF NOT EXISTS idx_requests_created_at ON requests (created_at DESC)",
                "CREATE INDEX IF NOT EXISTS idx_requests_city_id ON requests (city_id)",
                "CREATE INDEX IF NOT EXISTS idx_requests_status ON requests (status)",
                "CREATE INDEX IF NOT EXISTS idx_requests_client_phone ON requests (client_phone)",
                "CREATE INDEX IF NOT EXISTS idx_requests_city_status ON requests (city_id, status)",
                "CREATE INDEX IF NOT EXISTS idx_requests_phone_created ON requests (client_phone, created_at DESC)",
                # –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                "CREATE INDEX IF NOT EXISTS idx_transactions_created_at ON transactions (created_at DESC)",
                "CREATE INDEX IF NOT EXISTS idx_transactions_city_id ON transactions (city_id)",
                "CREATE INDEX IF NOT EXISTS idx_transactions_specified_date ON transactions (specified_date DESC)",
                # –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                "CREATE INDEX IF NOT EXISTS idx_masters_city_id ON masters (city_id)",
                "CREATE INDEX IF NOT EXISTS idx_masters_status ON masters (status)",
                "CREATE INDEX IF NOT EXISTS idx_employees_city_id ON employees (city_id)",
                "CREATE INDEX IF NOT EXISTS idx_employees_role_id ON employees (role_id)",
            ]

            for index_sql in indexes:
                try:
                    await conn.execute(text(index_sql))
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å")
                except Exception as e:
                    if "already exists" not in str(e):
                        logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await conn.execute(text("ANALYZE requests"))
            await conn.execute(text("ANALYZE transactions"))
            await conn.execute(text("ANALYZE masters"))
            await conn.execute(text("ANALYZE employees"))

            logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
        return False


async def generate_simple_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")

    try:
        from app.core.cache import cache_manager

        stats = cache_manager.get_stats()

        report = {
            "timestamp": datetime.now().isoformat(),
            "cache_stats": stats,
            "optimizations": [
                "‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞",
                "‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã",
                "‚úÖ –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã",
                "‚úÖ N+1 –∑–∞–ø—Ä–æ—Å—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã",
            ],
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        import json

        with open("performance_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, ensure_ascii=False, indent=2)

        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        print("\n" + "=" * 50)
        print("–û–¢–ß–ï–¢ –û–ë –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("=" * 50)
        print(f"–í—Ä–µ–º—è: {report['timestamp']}")
        print(f"Redis –ø–æ–¥–∫–ª—é—á–µ–Ω: {'‚úÖ' if stats['redis_connected'] else '‚ùå'}")
        print(f"–õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à: {stats['local_cache_size']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        print(f"–ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫–µ—à: {stats['hit_rate']}%")
        print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
        print("\n–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
        for opt in report["optimizations"]:
            print(f"  {opt}")
        print("=" * 50)

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

    success_count = 0
    total_steps = 4

    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        if await check_cache_system():
            success_count += 1

        # 2. –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
        if await test_optimized_crud():
            success_count += 1

        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
        if await create_basic_indexes():
            success_count += 1

        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        if await generate_simple_report():
            success_count += 1

        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if success_count == total_steps:
            logger.info("üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {success_count}/{total_steps} —à–∞–≥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        else:
            logger.warning(
                f"‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ {success_count}/{total_steps} —à–∞–≥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
            )
            print(f"\n‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ {success_count}/{total_steps} —à–∞–≥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try:
            from app.core.cache import cache_manager

            await cache_manager.close()
        except (ImportError, AttributeError, Exception) as e:
            print(f"Warning: Could not close cache manager: {e}")

        try:
            from app.core.database import engine

            await engine.dispose()
        except (ImportError, AttributeError, Exception) as e:
            print(f"Warning: Could not dispose database engine: {e}")


if __name__ == "__main__":
    asyncio.run(main())
