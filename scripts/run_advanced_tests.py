#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
E2E, Load Testing, Chaos Engineering, Contract Testing
"""
import asyncio
import subprocess
import sys
import os
import time
import json
from pathlib import Path
from typing import Dict, List, Any, Optional
import argparse
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.utils.subprocess_security import safe_subprocess_run, SubprocessSecurityError


class AdvancedTestRunner:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤"""

    def __init__(self):
        self.results = {
            "start_time": None,
            "end_time": None,
            "total_duration": 0,
            "test_results": {},
        }

    def run_command(
        self, cmd: List[str], description: str, timeout: int = 300
    ) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∏ —Ç–∞–π–º–∞—É—Ç–æ–º"""
        print(f"\nüîÑ {description}")
        print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")

        start_time = time.time()

        try:
            result = safe_subprocess_run(cmd, timeout=timeout, check=False)
            duration = time.time() - start_time

            success = result.returncode == 0

            if success:
                print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û ({duration:.2f}s)")
            else:
                print(f"‚ùå {description} - –û–®–ò–ë–ö–ê ({duration:.2f}s)")
                if result.stderr:
                    print(f"–û—à–∏–±–∫–∞: {result.stderr[:500]}")

            return {
                "success": success,
                "duration": duration,
                "returncode": result.returncode,
                "stdout": result.stdout,
                "stderr": result.stderr,
            }

        except SubprocessSecurityError as e:
            print(f"üîí {description} - –ë–õ–û–ö–ò–†–û–í–ê–ù–û –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: {e}")
            return {
                "success": False,
                "duration": time.time() - start_time,
                "error": str(e),
            }

        except Exception as e:
            print(f"üí• {description} - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            return {
                "success": False,
                "duration": time.time() - start_time,
                "error": str(e),
            }

    def run_e2e_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "=" * 60)
        print("üéØ –ó–ê–ü–£–°–ö E2E –¢–ï–°–¢–û–í")
        print("=" * 60)

        cmd = [
            sys.executable,
            "-m",
            "pytest",
            "tests/test_e2e_scenarios.py",
            "-v",
            "--tb=short",
            "--disable-warnings",
            "--asyncio-mode=auto",
            "--maxfail=5",
        ]

        result = self.run_command(
            cmd, "E2E —Ç–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", timeout=600
        )

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if result["success"]:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            stdout = result.get("stdout", "")
            if "passed" in stdout:
                print("üìä E2E —Ç–µ—Å—Ç—ã –ø–æ–∫–∞–∑–∞–ª–∏ —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            else:
                print("‚ö†Ô∏è E2E —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ—è—Å–Ω—ã")
        else:
            print("‚ùå E2E —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

        return result

    def run_load_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ Load —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "=" * 60)
        print("‚ö° –ó–ê–ü–£–°–ö LOAD –¢–ï–°–¢–û–í")
        print("=" * 60)

        cmd = [
            sys.executable,
            "-m",
            "pytest",
            "tests/test_load_testing.py",
            "-v",
            "--tb=short",
            "--disable-warnings",
            "--asyncio-mode=auto",
            "-s",  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å print statements
        ]

        result = self.run_command(cmd, "Load —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", timeout=900)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if result["success"]:
            stdout = result.get("stdout", "")
            if "Load Test Results" in stdout:
                print("üìà Load —Ç–µ—Å—Ç—ã –ø–æ–∫–∞–∑–∞–ª–∏ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            else:
                print("‚ö†Ô∏è Load —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")
        else:
            print("‚ùå Load —Ç–µ—Å—Ç—ã –≤—ã—è–≤–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é")

        return result

    def run_chaos_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ Chaos Engineering —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "=" * 60)
        print("üî• –ó–ê–ü–£–°–ö CHAOS ENGINEERING –¢–ï–°–¢–û–í")
        print("=" * 60)

        cmd = [
            sys.executable,
            "-m",
            "pytest",
            "tests/test_chaos_engineering.py",
            "-v",
            "--tb=short",
            "--disable-warnings",
            "--asyncio-mode=auto",
            "-s",  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å print statements
        ]

        result = self.run_command(
            cmd, "Chaos Engineering —Ç–µ—Å—Ç—ã –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏", timeout=800
        )

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã chaos testing
        if result["success"]:
            stdout = result.get("stdout", "")
            if "chaos scenario" in stdout.lower():
                print("üõ°Ô∏è Chaos —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")
            else:
                print("‚ö†Ô∏è Chaos —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        else:
            print("‚ùå Chaos —Ç–µ—Å—Ç—ã –≤—ã—è–≤–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é")

        return result

    def run_contract_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ Contract —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "=" * 60)
        print("üìã –ó–ê–ü–£–°–ö CONTRACT –¢–ï–°–¢–û–í")
        print("=" * 60)

        cmd = [
            sys.executable,
            "-m",
            "pytest",
            "tests/test_contract_testing.py",
            "-v",
            "--tb=short",
            "--disable-warnings",
            "--asyncio-mode=auto",
        ]

        result = self.run_command(cmd, "Contract —Ç–µ—Å—Ç—ã API –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤", timeout=400)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã contract testing
        if result["success"]:
            stdout = result.get("stdout", "")
            if "contract" in stdout.lower():
                print("üìÑ Contract —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ API –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º")
            else:
                print("‚ö†Ô∏è Contract —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        else:
            print("‚ùå Contract —Ç–µ—Å—Ç—ã –≤—ã—è–≤–∏–ª–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è API –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º")

        return result

    def run_all_tests(self, test_types: Optional[List[str]] = None) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        if test_types is None:
            test_types = ["e2e", "load", "chaos", "contract"]

        self.results["start_time"] = datetime.now().isoformat()
        start_time = time.time()

        print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–î–í–ò–ù–£–¢–´–• –¢–ï–°–¢–û–í")
        print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤: {', '.join(test_types)}")
        print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {self.results['start_time']}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤
        if "e2e" in test_types:
            self.results["test_results"]["e2e"] = self.run_e2e_tests()

        if "load" in test_types:
            self.results["test_results"]["load"] = self.run_load_tests()

        if "chaos" in test_types:
            self.results["test_results"]["chaos"] = self.run_chaos_tests()

        if "contract" in test_types:
            self.results["test_results"]["contract"] = self.run_contract_tests()

        # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.results["end_time"] = datetime.now().isoformat()
        self.results["total_duration"] = time.time() - start_time

        return self.results

    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        report = []
        report.append("=" * 80)
        report.append("üìä –û–¢–ß–ï–¢ –û –ü–†–û–î–í–ò–ù–£–¢–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        report.append("=" * 80)

        report.append(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {self.results['start_time']}")
        report.append(f"üïê –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {self.results['end_time']}")
        report.append(
            f"‚è±Ô∏è –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.results['total_duration']:.2f} —Å–µ–∫—É–Ω–¥"
        )

        report.append("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –¢–ò–ü–ê–ú –¢–ï–°–¢–û–í:")
        report.append("-" * 50)

        total_tests = len(self.results["test_results"])
        passed_tests = 0

        for test_type, result in self.results["test_results"].items():
            status = "‚úÖ –ü–†–û–®–ï–õ" if result["success"] else "‚ùå –ù–ï –ü–†–û–®–ï–õ"
            duration = result["duration"]

            report.append(f"{test_type.upper():12} | {status} | {duration:8.2f}s")

            if result["success"]:
                passed_tests += 1

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
            if not result["success"] and "error" in result:
                report.append(f"             –û—à–∏–±–∫–∞: {result['error']}")

        report.append("-" * 50)
        report.append(f"–ò–¢–û–ì–û: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")

        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        success_rate = passed_tests / total_tests if total_tests > 0 else 0

        if success_rate >= 0.8:
            report.append(
                "\nüéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑–∞–ª–∞ –≤—ã—Å–æ–∫—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ production"
            )
        elif success_rate >= 0.6:
            report.append(
                "\n‚ö†Ô∏è –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥–æ—Ç–æ–≤–∞, –Ω–æ –µ—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"
            )
        elif success_rate >= 0.4:
            report.append(
                "\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –†–ê–ë–û–¢–ê! –°–∏—Å—Ç–µ–º–∞ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –¥–æ—Ä–∞–±–æ—Ç–∫–∞—Ö"
            )
        else:
            report.append("\nüö® –ö–†–ò–¢–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ production")

        report.append("\n" + "=" * 80)

        return "\n".join(report)

    def save_report(self, filename: Optional[str] = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"advanced_test_report_{timestamp}.txt"

        report_content = self.generate_report()

        with open(filename, "w", encoding="utf-8") as f:
            f.write(report_content)

        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")

        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        json_filename = filename.replace(".txt", ".json")
        with open(json_filename, "w", encoding="utf-8") as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)

        print(f"üìÑ JSON –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {json_filename}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    parser.add_argument(
        "--types",
        nargs="+",
        choices=["e2e", "load", "chaos", "contract"],
        default=["e2e", "load", "chaos", "contract"],
        help="–¢–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞",
    )
    parser.add_argument(
        "--report", default="advanced_test_report.txt", help="–ò–º—è —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞"
    )
    parser.add_argument(
        "--no-report", action="store_true", help="–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"
    )

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–µ–º runner –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = AdvancedTestRunner()

    try:
        results = runner.run_all_tests(args.types)

        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        report = runner.generate_report()
        print(report)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        if not args.no_report:
            runner.save_report(args.report)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        total_tests = len(results["test_results"])
        passed_tests = sum(1 for r in results["test_results"].values() if r["success"])

        if passed_tests == total_tests:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        elif passed_tests >= total_tests * 0.8:
            print("\n‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
            sys.exit(1)
        else:
            print("\n‚ùå –ú–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
            sys.exit(2)

    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)

    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def run_quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ü–†–û–î–í–ò–ù–£–¢–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")

    runner = AdvancedTestRunner()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ E2E —Ç–µ—Å—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    results = runner.run_all_tests(["e2e"])

    report = runner.generate_report()
    print(report)

    return results["test_results"]["e2e"]["success"]


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1 and sys.argv[1] == "--quick":
        success = run_quick_test()
        sys.exit(0 if success else 1)
    else:
        main()
