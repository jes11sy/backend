#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
–¶–µ–ª—å: –¥–æ—Å—Ç–∏—á—å 80%+ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞
"""
import subprocess
import sys
import os
import time
from pathlib import Path
from app.utils.subprocess_security import safe_subprocess_run, SubprocessSecurityError


def run_command(cmd, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüîÑ {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")

    result = safe_subprocess_run(cmd, check=False)

    if result.returncode == 0:
        print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
        if result.stdout:
            print(result.stdout)
    else:
        print(f"‚ùå {description} - –û–®–ò–ë–ö–ê")
        if result.stderr:
            print(result.stderr)
        if result.stdout:
            print(result.stdout)

    return result.returncode == 0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –° –ü–û–ö–†–´–¢–ò–ï–ú –ö–û–î–ê")
    print("=" * 60)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é backend
    backend_dir = Path(__file__).parent
    os.chdir(backend_dir)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pytest
    if not run_command(
        [sys.executable, "-m", "pytest", "--version"], "–ü—Ä–æ–≤–µ—Ä–∫–∞ pytest"
    ):
        print("‚ùå pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
        if not run_command(
            [
                sys.executable,
                "-m",
                "pip",
                "install",
                "pytest",
                "pytest-cov",
                "pytest-asyncio",
            ],
            "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ pytest",
        ):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pytest")
            return 1

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç—á–µ—Ç—ã
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤...")
    for path in ["htmlcov", ".coverage", "coverage.xml"]:
        if os.path.exists(path):
            if os.path.isdir(path):
                import shutil

                shutil.rmtree(path)
            else:
                os.remove(path)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    test_categories = [
        ("tests/test_simple.py", "–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã"),
        ("tests/test_auth.py", "–¢–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"),
        ("tests/test_models.py", "–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π"),
        ("tests/test_api.py", "–¢–µ—Å—Ç—ã API"),
        ("tests/test_integration_api.py", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã API"),
        ("tests/test_database_comprehensive.py", "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ë–î"),
        ("tests/test_security_comprehensive.py", "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
        ("tests/test_performance_comprehensive.py", "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"),
        ("tests/test_mocks.py", "–¢–µ—Å—Ç—ã —Å –º–æ–∫–∞–º–∏"),
        ("tests/test_performance.py", "–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"),
    ]

    print("\nüìä –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú")
    print("-" * 40)

    total_passed = 0
    total_failed = 0

    for test_file, description in test_categories:
        if os.path.exists(test_file):
            print(f"\nüîç {description}")
            result = subprocess.run(
                [
                    sys.executable,
                    "-m",
                    "pytest",
                    test_file,
                    "-v",
                    "--tb=short",
                    "--disable-warnings",
                ],
                capture_output=True,
                text=True,
            )

            if result.returncode == 0:
                print(f"‚úÖ {description} - –ü–†–û–ô–î–ï–ù–´")
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
                lines = result.stdout.split("\n")
                for line in lines:
                    if "passed" in line and "failed" not in line:
                        parts = line.split()
                        for i, part in enumerate(parts):
                            if part == "passed":
                                try:
                                    passed = int(parts[i - 1])
                                    total_passed += passed
                                except (ValueError, IndexError) as e:
                                    print(f"Warning: Could not parse test count: {e}")
                                    pass
            else:
                print(f"‚ùå {description} - –û–®–ò–ë–ö–ò")
                if result.stderr:
                    print(result.stderr[:500])  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—à–∏–±–∫–∏
                total_failed += 1
        else:
            print(f"‚ö†Ô∏è {description} - –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù: {test_file}")

    print(f"\nüìà –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total_passed}")
    print(f"–§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {total_failed}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    print("\nüéØ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ù–ê–ë–û–†–ê –¢–ï–°–¢–û–í –° –ü–û–ö–†–´–¢–ò–ï–ú")
    print("=" * 50)

    coverage_cmd = [
        sys.executable,
        "-m",
        "pytest",
        "tests/",
        "--cov=app",
        "--cov-report=html",
        "--cov-report=term-missing",
        "--cov-report=xml",
        "--cov-fail-under=80",
        "-v",
        "--tb=short",
        "--disable-warnings",
        "--maxfail=10",  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ 10 –æ—à–∏–±–æ–∫
    ]

    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(coverage_cmd)}")

    start_time = time.time()
    result = subprocess.run(coverage_cmd, text=True)
    end_time = time.time()

    print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")

    if result.returncode == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ –¥–æ—Å—Ç–∏–≥–ª–æ 80%+")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
        if os.path.exists("htmlcov/index.html"):
            print(
                f"\nüìä HTML –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏: {os.path.abspath('htmlcov/index.html')}"
            )

        if os.path.exists("coverage.xml"):
            print(f"üìä XML –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏: {os.path.abspath('coverage.xml')}")

        print("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–ö–†–´–¢–ò–Ø:")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
        coverage_report_cmd = [
            sys.executable,
            "-m",
            "coverage",
            "report",
            "--show-missing",
        ]
        subprocess.run(coverage_report_cmd)

        return 0
    else:
        print("\n‚ùå –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ò–õ–ò–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò")

        if result.returncode == 1:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏, –Ω–æ –ø–æ–∫—Ä—ã—Ç–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ")
        elif result.returncode == 2:
            print("‚ùå –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ –Ω–∏–∂–µ 80%")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
        print("\nüìä –¢–ï–ö–£–©–ï–ï –ü–û–ö–†–´–¢–ò–ï:")
        coverage_report_cmd = [sys.executable, "-m", "coverage", "report"]
        subprocess.run(coverage_report_cmd)

        return 1


if __name__ == "__main__":
    sys.exit(main())
